diff a/fluid/packages/contracts/src/FluidLocker.sol b/fluid/packages/contracts/src/FluidLocker.sol	(rejected hunks)
@@ -26,6 +26,29 @@ import { ReentrancyGuard } from "solady/utils/ReentrancyGuard.sol";
 using SuperTokenV1Library for ISuperToken;
 using SafeCast for int256;
 
+/// @dev Basis points denominator (for percentage calculation)
+uint256 constant BP_DENOMINATOR = 10_000;
+
+/// @dev Scaler used for unlock percentage calculation
+uint256 constant UNLOCKING_PCT_SCALER = 1e18;
+
+function calculateVestUnlockFlowRates(uint256 amountToUnlock, uint128 unlockPeriod)
+    pure
+    returns (int96 unlockFlowRate, int96 taxFlowRate)
+{
+    int96 globalFlowRate = int256(amountToUnlock / unlockPeriod).toInt96();
+
+    unlockFlowRate =
+        (globalFlowRate * int256(getUnlockingPercentage(unlockPeriod))).toInt96() / int256(BP_DENOMINATOR).toInt96();
+    taxFlowRate = globalFlowRate - unlockFlowRate;
+}
+
+function getUnlockingPercentage(uint128 unlockPeriod) pure returns (uint256 unlockingPercentageBP) {
+    unlockingPercentageBP = (
+        2_000 + ((8_000 * Math.sqrt(unlockPeriod * UNLOCKING_PCT_SCALER)) / Math.sqrt(540 days * UNLOCKING_PCT_SCALER))
+    );
+}
+
 /**
  * @title Locker Contract
  * @author Superfluid
@@ -69,12 +92,6 @@ contract FluidLocker is Initializable, ReentrancyGuard, IFluidLocker {
     /// @notice Instant unlock penalty percentage (expressed in basis points)
     uint256 private constant _INSTANT_UNLOCK_PENALTY_BP = 8_000;
 
-    /// @notice Basis points denominator (for percentage calculation)
-    uint256 private constant _BP_DENOMINATOR = 10_000;
-
-    /// @notice Scaler used for unlock percentage calculation
-    uint256 private constant _SCALER = 1e18;
-
     /// @notice Scaler used for unlock percentage calculation
     uint256 private constant _PERCENT_TO_BP = 100;
 
@@ -213,6 +230,11 @@ contract FluidLocker is Initializable, ReentrancyGuard, IFluidLocker {
             revert FORBIDDEN();
         }
 
+        // Ensure that the tax distribution pools has at least one unit distributed
+        if (TAX_DISTRIBUTION_POOL.getTotalUnits() == 0) {
+            revert TAX_DISTRIBUTION_POOL_HAS_NO_UNITS();
+        }
+
         // Get balance available for unlocking
         uint256 availableBalance = getAvailableBalance();
 
@@ -270,6 +292,28 @@ contract FluidLocker is Initializable, ReentrancyGuard, IFluidLocker {
         emit FluidUnstaked();
     }
 
+    /// @inheritdoc IFluidLocker
+    function connectToPool(uint256 programId) external nonReentrant onlyLockerOwner {
+        // Get the corresponding program pool
+        ISuperfluidPool programPool = EP_PROGRAM_MANAGER.getProgramPool(programId);
+
+        if (!FLUID.isMemberConnected(address(programPool), address(this))) {
+            // Connect this locker to the Program Pool
+            FLUID.connectPool(programPool);
+        }
+    }
+
+    /// @inheritdoc IFluidLocker
+    function disconnectFromPool(uint256 programId) external nonReentrant onlyLockerOwner {
+        // Get the corresponding program pool
+        ISuperfluidPool programPool = EP_PROGRAM_MANAGER.getProgramPool(programId);
+
+        if (FLUID.isMemberConnected(address(programPool), address(this))) {
+            // Connect this locker to the Program Pool
+            FLUID.disconnectPool(programPool);
+        }
+    }
+
     //   _    ___                 ______                 __  _
     //  | |  / (_)__ _      __   / ____/_  ______  _____/ /_(_)___  ____  _____
     //  | | / / / _ \ | /| / /  / /_  / / / / __ \/ ___/ __/ / __ \/ __ \/ ___/
@@ -335,10 +379,10 @@ contract FluidLocker is Initializable, ReentrancyGuard, IFluidLocker {
 
     function _instantUnlock(uint256 amountToUnlock, address recipient) internal {
         // Calculate instant unlock penalty amount
-        uint256 penaltyAmount = (amountToUnlock * _INSTANT_UNLOCK_PENALTY_BP) / _BP_DENOMINATOR;
+        uint256 penaltyAmount = (amountToUnlock * _INSTANT_UNLOCK_PENALTY_BP) / BP_DENOMINATOR;
 
         // Distribute penalty to staker (connected to the TAX_DISTRIBUTION_POOL)
-        FLUID.distributeToPool(address(this), TAX_DISTRIBUTION_POOL, penaltyAmount);
+        FLUID.distribute(address(this), TAX_DISTRIBUTION_POOL, penaltyAmount);
 
         // Transfer the leftover $FLUID to the locker owner
         FLUID.transfer(recipient, amountToUnlock - penaltyAmount);
@@ -348,7 +392,7 @@ contract FluidLocker is Initializable, ReentrancyGuard, IFluidLocker {
 
     function _vestUnlock(uint256 amountToUnlock, uint128 unlockPeriod, address recipient) internal {
         // Calculate the unlock and penalty flow rates based on requested amount and unlock period
-        (int96 unlockFlowRate, int96 taxFlowRate) = _calculateVestUnlockFlowRates(amountToUnlock, unlockPeriod);
+        (int96 unlockFlowRate, int96 taxFlowRate) = calculateVestUnlockFlowRates(amountToUnlock, unlockPeriod);
 
         // Use create2 to deploy a Fontaine Beacon Proxy
         // The salt used for deployment is the hashed encoded Locker address and unlock identifier
@@ -364,33 +408,11 @@ contract FluidLocker is Initializable, ReentrancyGuard, IFluidLocker {
         fontaineCount++;
 
         // Initialize the new Fontaine instance (this initiate the unlock process)
-        IFontaine(newFontaine).initialize(recipient, unlockFlowRate, taxFlowRate);
+        IFontaine(newFontaine).initialize(recipient, unlockFlowRate, taxFlowRate, unlockPeriod);
 
         emit FluidUnlocked(unlockPeriod, amountToUnlock, recipient, newFontaine);
     }
 
-    function _calculateVestUnlockFlowRates(uint256 amountToUnlock, uint128 unlockPeriod)
-        internal
-        pure
-        returns (int96 unlockFlowRate, int96 taxFlowRate)
-    {
-        int96 globalFlowRate = int256(amountToUnlock / unlockPeriod).toInt96();
-
-        unlockFlowRate = (globalFlowRate * int256(_getUnlockingPercentage(unlockPeriod))).toInt96()
-            / int256(_BP_DENOMINATOR).toInt96();
-        taxFlowRate = globalFlowRate - unlockFlowRate;
-    }
-
-    function _getUnlockingPercentage(uint128 unlockPeriod) internal pure returns (uint256 unlockingPercentageBP) {
-        unlockingPercentageBP = (
-            _PERCENT_TO_BP
-                * (
-                    ((80 * _SCALER) / Math.sqrt(540 * _SCALER)) * (Math.sqrt(unlockPeriod * _SCALER) / _SCALER)
-                        + 20 * _SCALER
-                )
-        ) / _SCALER;
-    }
-
     //      __  ___          ___ _____
     //     /  |/  /___  ____/ (_) __(_)__  __________
     //    / /|_/ / __ \/ __  / / /_/ / _ \/ ___/ ___/
